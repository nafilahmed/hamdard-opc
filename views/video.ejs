<!doctype html>
<html lang="en">
	<head>
		<title>O'Reilly Introduction to WebRTC</title>
		<link rel="stylesheet" type="text/css" href="css/style.css">
		<script src="/socket.io/socket.io.js"></script>
	</head>
	<body>
		<video width='340' height='170' id="myVideoTag" autoplay></video>
		<video width='640' height='360' id="theirVideoTag" autoplay></video>
        <div id="mario-chat">
            <button id="cBtn">End Call</button>
            <div id="signalingArea">Signaling Messages:</br></div>
        </div>
		
		<script>
			var myVideoArea = document.getElementById("myVideoTag");
			var theirVideoArea = document.getElementById("theirVideoTag");
			var signalingArea = document.getElementById("signalingArea");
			var executed = false;
			var call = false;
			var ROOM = "<%= locals.docid %>";
			var SIGNAL_ROOM = "<%= locals.docid %>";
			// var a = '<%= locals.docname %>';
			// console.log(a);
			var configuration = {
				'iceServers': [{
					'url': 'stun:stun.l.google.com:19302'
				}]
			};
			var rtcPeerConn;
			
			io = io.connect();
			io.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM});

			io.emit('signal',{"type":"user_here", "message":"Are you ready for a call?", "room":SIGNAL_ROOM});
						
			io.on('signaling_message', function(data) {

				displaySignalMessage("Signal received: " + data.type);
				
				//Setup the RTC Peer Connection object
				if (!rtcPeerConn)
					{
						startSignaling();
					}

				if (data.type == "close") {
				    //return function() {
			        if (!executed) {
			            
						rtcPeerConn.close();
						myVideoArea.pause();

						io.emit('signal',{"type":"close", "message":"Are you ready for a call?", "room":SIGNAL_ROOM});
						executed = true;
						window.close();
						//window.location.reload();	
			            // do something
			        }
				}
					
				if (data.type != "user_here" && data.type != "close" ) {
					var message = JSON.parse(data.message);
					if (message.sdp) {
						rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
							// if we received an offer, we need to answer
							if (rtcPeerConn.remoteDescription.type == 'offer') {
								rtcPeerConn.createAnswer(sendLocalDesc, logError);
							}
						}, logError);
					}
					else {
						rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
					}
				}
				
			});
			
			function startSignaling() {


				displaySignalMessage("starting signaling...");
				
				rtcPeerConn = new webkitRTCPeerConnection(configuration);
				
				// send any ice candidates to the other peer
				rtcPeerConn.onicecandidate = function (evt) {
					if (evt.candidate)
						io.emit('signal',{"type":"ice candidate", "message": JSON.stringify({ 'candidate': evt.candidate }), "room":SIGNAL_ROOM});
					displaySignalMessage("completed that ice candidate...");
				};
				
				// let the 'negotiationneeded' event trigger offer generation
				rtcPeerConn.onnegotiationneeded = function () {
					displaySignalMessage("on negotiation called");
					rtcPeerConn.createOffer(sendLocalDesc, logError);
				}
				
				// once remote stream arrives, show it in the remote video element
				rtcPeerConn.onaddstream = function (evt) {
					displaySignalMessage("going to add their stream...");
					theirVideoArea.src = URL.createObjectURL(evt.stream);
				};

				//setting constraints
				var constraints = {
                    video: {
                         mandatory: {
                         minWidth: 640,
                         minHeight: 480
                       }
                       },
                    audio: true
                };
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|OperaMini/i.test(navigator.userAgent)) {
                // The user is using a mobile device, lower our minimum
                  constraints = {
                     video: {
                         mandatory: {
                         minWidth: 480,
                         minHeight: 320,
                         maxWidth: 1024,
                         maxHeight: 768
                        }
                    },
                    audio: true
                  };
                }

				
				// get a local stream, show it in our video tag and add it to be sent
				navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
				navigator.getUserMedia(constraints, function (stream) {
					displaySignalMessage("going to display my stream...");
					myVideoArea.src = URL.createObjectURL(stream);
					rtcPeerConn.addStream(stream);
				}, logError);
			  
			}
			
			function sendLocalDesc(desc) {
				rtcPeerConn.setLocalDescription(desc, function () {
					displaySignalMessage("sending local description");
					io.emit('signal',{"type":"SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room":SIGNAL_ROOM});
				}, logError);
			}
			
			function logError(error) {
				displaySignalMessage(error.name + ': ' + error.message);
			}
			
		
			
			function displaySignalMessage(message) {
				signalingArea.innerHTML = signalingArea.innerHTML + "<br/>" + message;
			}
			
			document.getElementById("cBtn").addEventListener("click", function(ev){

				io.emit('signal',{"type":"close", "message":"Are you ready for a call?", "room":SIGNAL_ROOM});
				ev.preventDefault();
			}, false);

		</script>
	</body>
</html>